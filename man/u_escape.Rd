% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/escape.R
\name{u_escape}
\alias{u_escape}
\title{Escape non-ASCII characters for portable R strings}
\usage{
u_escape(x, ranges = FALSE)
}
\arguments{
\item{x}{a single \code{character} string.}

\item{ranges}{a \code{logical} flag. If \code{FALSE} (the default),
the function only returns the possibly modified string. If \code{TRUE},
the locations of the modifications are also returned.}
}
\value{
If \code{ranges} is \code{FALSE}, returns a version of \code{x}
  where non-ASCII characters have been encoded (\code{character} string).
  If \code{ranges} is \code{TRUE}, returns a \code{list} with two elements:
  \item{\code{"text"}}{the escaped string,}
  \item{\code{"ranges"}}{a \code{data.frame} with two columns:
    \code{"first"} denotes the beginning of each escape sequence added to
    the output string, and \code{"last"} is the final character of the
    sequence, in the \code{\link{substr}} sense.}
}
\description{
The function converts non-ASCII characters to \code{"\\u1234"} (when
sufficient) or \code{"\\U12345678"} notation using the corresponding Unicode
code point. A backslash is literally included in the escape code, equivalent
to two backslashes when typing a string.
}
\examples{
x <- "Mot\\u00f6rhead"
u_escape(x, ranges = TRUE)
x2 <- c(charToRaw("grinning face "), as.raw(c(0xf0, 0x9f, 0x98, 0x80)),
        charToRaw(" is code point U+1f600"))
x2 <- rawToChar(x2)
Encoding(x2) <- "UTF-8"
u_escape(x2)
}
