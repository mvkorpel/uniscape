% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find.R
\name{find_strings}
\alias{find_strings}
\title{Find R character strings in input text}
\usage{
find_strings(x, mutate_func = NULL, ...)
}
\arguments{
\item{x}{input text. A \code{character} vector.}

\item{mutate_func}{optional function for mutating every string found. The
function must accept a string as its first argument and return a string (or
something coercible to a string). The function operates on the contents of
the string, i.e., the delimiters (quotes) will remain unchanged.}

\item{\dots}{optional arguments to \code{mutate_func}.}
}
\value{
If no function is specified (the default), the location of each \R string
  is returned in a \code{data.frame}. The columns are \code{"row_first"},
  \code{"first"}, \code{"row_last"}, and \code{"last"}. These point
  to the row and column numbers of the first and last character of each
  string (contents only, i.e., delimiters excluded). The numbering is based
  on one item of \code{x} representing one line of code, i.e., no newlines in
  \code{x}. Empty strings have a \code{"last"} character one smaller than
  the \code{"first"}.

  If \code{mutate_func} is specified, the main function returns a \code{list}
  with items \code{"text"} and \code{"ranges"} described in
  \code{\link{string_mutate}}. In \code{"text"}, every \R string in \code{x}
  has been run through the mutation function, possibly in multiple parts.
}
\description{
Finds \R \code{character} strings in vector \code{x}. The input is
interpreted as consecutive lines of \R code. A function may be supplied for
mutating each string found.
}
\section{Note}{
 The mutation function, if specified, should preferably operate
  on a character-by-character basis. See \code{\link{string_mutate}}.
}

\examples{
x <- c("### A sample R script",
       "foo <- function(x) {",
       "    ## Comments are 'ignored'",
       "    paste(\\"\\\\\\"foo\\", x, '#bar\\\\\\\\', \\"'baz'\\") #, \\"more\\")",
       "}")
find_strings(x)
x_upper <- find_strings(x, mutate_func = toupper)
cat(x_upper[["text"]], sep = "\\n")
x_nchar <- find_strings(x, mutate_func = nchar)
cat(x_nchar[["text"]], sep = "\\n")
}
\seealso{
\code{\link{u_escape}} can be used as \code{mutate_func}.
}
